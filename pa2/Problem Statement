CS 455 Programming Assignment 2

In this assignment you will get practice using the Java ArrayList class, and more practice implementing your own classes. Like you did in assignment 1 and lab 4, you will be implementing a class whose specification we have given you, in this case a polynomial class called Poly; you will also be writing a command-based program to work with Poly objects. Writing the command-based program will give you more experience processing input line-by line and error-checking user input.
Note: this program is due after your midterm exam, but it's a fair amount bigger than the first assignment. It will be difficult to complete it on time if you wait until after the midterm to start it. It only uses topics from before the midterm, so working on it now will also help you prepare for the exam (there will be paper and pencil programming problems as part of the exam). One possible milestone to shoot for is to get the Poly class implemented and tested (with PolyTester) by the midterm.

The assignment files

Getting the assignment files. Make a pa2 directory and cd into it. Copy all of the source code files in the pa2 directory of the course account to your pa2 directory. We can accomplish this with Unix wildcards (denoted with a *). The following command copies all files that have a .java suffix from the given directory to your current directory:
cp ~csci455/assgts/pa2/*.java .
The files in bold below are ones you create and/or modify and submit. The ones not in bold are ones that you will use, but not modify. The files are:

Poly.java The interface for the Poly class; it contains stub versions of the functions so it will compile. You will be completing the implementation of this class. You may not change the interface for this class (with one exception described later), but you may add private instance variables and/or private methods to it
Term.java Code for a class for a single term in a polynomial. We wrote this class for you. Don't change it.
PolyTester.java A non-interactive test program for your Poly class. You are not required to submit this file. This is described further in a later section.
PolyProg.java The command-based program that lets you manipulate polynomials. Its behavior is specified later in the assignment. You create this file.
README See section on Submitting your program for what to put in it. Before you start the assignment please read the following statement which you will be "signing" in the README:
"I certify that the work submitted for this assignment does not violate USC's student conduct code. In particular, the work is my own, not a collaboration, and does not involve code created by other people, with the exception of the resources explicitly mentioned in the CS 455 Course Syllabus. And I did not share my solution or parts of it with other students in the course."
Note on running your program

We will be using assert statements in this program. To be able to use them, you need to run the program with asserts enabled (-ea flag). (You do not need to compile any special way.) Here are two examples:
java -ea PolyTester
java -ea PolyProg
You should run with this flag set every time.
Assert statements, described in Special Topic 11.5 of the text, are another tool to help us write correct code. More about how we are using them here in the section on representation invariants.

NOTE: I have had problems getting assert statements to work in Eclipse with Java 1.5 (I think I got a compile error); if there is some trick to doing that that you discover, let us know on the discussion board. It works fine with javac/java on Unix. In Eclipse you use the Run Configurations settings to change what arguments are used when running a program.


The assignment

You will be implementing a polynomial class along with an interactive command-based program that uses your class. The program will allow the user to create and manipulate several polynomials. The internal representation we will use for a polynomial is an ArrayList object. Some of the requirements for the program relate to efficiency, testing, and style/design, as well as functionality. They are described in detail in the following sections of the document, and then summarized near the end of the document.
Poly: interface

Your polynomial class, Poly, will have floating point coefficients, and non-negative integer exponents. The class definition is in Poly.java. There is also a helper Term class defined in Term.java. A Term is used to hold the (coefficient,exponent) pair that makes up one term in a polynomial. The interface for Poly is described below using example calls and results:
Poly p = new Poly();
Create the zero polynomial. That is one all of whose coefficients have the value zero.
Poly p = new Poly(new Term(3,5));
Create a polynomial with a single term. For example, the above expression creates the polynomial 3x5.
Poly poly = new Poly(termList);
Creates a polynomial from a (possibly-empty) arraylist of terms.
termList: {2x, 3x3, 7, 2x3, -5x3,  0x10}
poly: 2x + 7
double result = poly1.eval(x);
Evaluate a polynomial for a specific floating point value of x.
poly1: 3x3 + 2x + 7
x: 2
result: 35
System.out.println(poly1.toFormattedString());
Return a String version of the polynomial that's close to the usual format we use to denote polynomials. It's "close to", because it's not going to use a superscript to denote exponentiation. Here's the format to use:
3.0x^2 + 2.0x + 7.0
For the zero polynomial print 0.0.
For negative coefficients, you should display them as shown in the following example:

-3.0x^2 + -2.0x + -7.0
Note that to make the coding easier a double that has no decimal part is printed as, for example, "3.0" instead of "3"; that's the default format used in Java when converting such a double to a String.
Note: No Poly methods do any I/O.
Clearly there is additional functionality one might want to offer in a useful Poly class, such as addition and multiplication, but we'll keep this one small to make it doable within the time constraints. (You may be enhancing this class in a later assignment.)

You may have noticed that there is one more Poly method, isValidPoly, that's private , i.e., not part of the public interface. We will describe that later after we discuss the representation.

You may not change the interface for this class, with the following exception: you may add a public Poly toString method that you may want to use for debugging purposes. It would probably mostly call the toString method(s) of its constituent part(s).

Poly: representation/implementation

You can think of a polynomial
Cn xn + Cn-1xn-1 + . . .+ C1 x + C0

as a bunch of pairs (Ci, i), where Ci is the coefficient of the term with power i. We could easily represent this with an array or ArrayList of n+1 values, where v[i] is the coefficient for xi. However, for any of the terms where the coefficient is zero, we don't normally show that as part of the polynomial, since a zero coefficient makes that whole term zero. In fact, many times we have a polynomial with a large degree (highest power of x), but very few non-zero terms. We call a polynomial with many zero terms a sparse polynomial.

An efficient representation for a sparse polynomial is one where we only store the non-zero terms. We're going to use such a sparse representation using an ArrayList for it here (a linked list would also be suitable, but we haven't covered that yet). Each element in the list will represent the (Ci, i) pair for a non-zero term in the polynomial. Furthermore, we're going to maintain this as an ordered list, ordered from highest power term to lowest. Here's an example:

polynomial: x100 + 3 
representation: { (1,100)   (3,0) }

polynomial: x2 + 2x + 1 
representation: { (1,2)   (2,1)   (1,0) }

We can think of the first example above as "1 times x to the 100th plus 3 times x to the 0", which leads to the two pairs given. The zero polynomial will be represented by a list of no pairs (i.e., an empty list).

The polynomial will be in a simplified form: besides no zero terms, we won't ever have two terms with the same exponent. If you look at the interface for Poly, you will see that there are no restrictions on the term argument used in creating one (although the Term class itself has a restriction of no negative exponents); this implies that the Poly code itself is responsible for making sure the internal representation is a simplified polynomial. The methods that are concerned with this are the three constructors. For example, after executing the following code sequence all of the poly's p1 through p4 are the zero polynomial (i.e., internally, an empty ArrayList). (Note: the Java idiom below with asListis a convenient way to create an ArrayList of hard-coded values all in one statement.)

    Poly p1= new Poly();
    Poly p2 = new Poly(new Term(0, 3));
    ArrayList termList = new ArrayList(Arrays.asList(new Term(1, 1), new Term(-1, 1)));   
    Poly p3 = new Poly(termList);
    termList = new ArrayList(Arrays.asList(new Term(0, 2));
    Poly p4 = new Poly(termList);
For another example of this simplification, look at the example input and output for the last call to create shown in the section on PolyProg.
Auxiliary functions. As usual with classes, you are free to add private auxiliary (a.k.a., helper) methods that help you do the work of the methods that are part of the public interface, especially in cases where you can use that function more than once in the other code. This will help you avoid writing redundant code, and will help you keep your methods shorter and more readable. See the summary section near the end of the document for more information about restrictions on method length.


More on creating a polynomial from an arraylist

You are required to do this operation in an efficient way. To be able to do that, you will need to sort the values first, and then simplify the resulting expression. Do not run off and implement your own sort routine, but read on for more details about how you will do this:
Sorting in Java. To call sort correctly for this situation involves some more advanced Java, so we wrote that part of the code for you already. It involves the call itself, plus an auxiliary class called TermComparator that compares two terms. You do not need to understand this code in detail to complete this assignment; we will be covering sorting in Java a little later in the semester. What you need to know is that the call we provided will efficiently sort the values in decreasing order by exponent.
We put the sorted version of the arrayList into an array, mostly so you don't have to call get to access the elements of this temporary array whose size won't change.

Simplifying the expression. To get full credit for this, you need to do it efficiently, which means here that it should run in time proportional to the length of the arraylist given in the parameter. To be able to satisfy that, you will need limit any calls to the ArrayList add, and remove methods to be done only at the end of the arraylist you are creating (not the beginning or the middle). When you pass other indices to these methods, they are considerably slower. (Because, as we saw in lecture, inserting and removing items from the middle of an array (or arraylist) involves shifting a bunch of values.)
A note about sharing objects. Because the client might want to keep using the ArrayList that is passed to the Poly constructor, it's important that the constructor does not save a reference to it as the value of its own instance variable, but rather creates its own arraylist for its data. However, since Term objects are immutable, it's safe to share them between the client code and Poly objects. Put another way, you don't always have to do new Term(...) when you put a Term into the ArrayList inside a Poly. Consistent with this, the first part of the starter code we gave you for the ArrayLit to Poly constructor copies the arraylist into an array, but does not copy the contained Term objects contained in that arraylist. We will be discussing these issues in more detail in the lecture before the midterm. See also sections 8.2.3 and 8.2.4 of the textbook.

Representation invariants

Many of the development techniques we discuss in this class, for example incremental development, the use of good variable names, and unit-testing, are to help enable us to write correct code (and make it easier to enhance that code later). Another way to ensure correct code within a class is to make explicit any restrictions on what values are allowed to be in a private instance variable, and any restrictions on relationships between values in different instances variables in our object. Or put another way, making sure we know what must be true about our object representation when it is in a valid state. These are called representation invariants.
Representation invariants are things that are true about the object as viewed by the implementor. Since for many classes, once a constructor has been called, the other methods can be called in any order, we need to ensure that none of the constructors or mutators can leave the object in an invalid state. It will be easier to do that if we know what those assumptions are.

Note: The Poly class doesn't actually have any mutators, the only methods that change a poly object's state are the ones that create them.

There are two assignment requirements for your Poly class related to this issue (detailed explanations of each of these follow):

in a comment next to your private instance variable definitions for Poly, list the representation invariants for the object.
write the private boolean method isValidPoly() and call it from other places in your program as described below.
The representation invariant comment for Poly 
Write a list of all the conditions that the internals of a Poly object must satisfy. That is, conditions that are always true about the data in a valid Poly object. You can find this information in the previous section. For example, one invariant is that for a non-zero poly all the terms must be in decreasing order by exponent.
isValidPoly() method 
This function will test the representation invariant for the internals of a poly. It will return true iff it is valid, i.e., the invariants are satisfied.

Call this function at the end of every Poly method, including the constructors, to make sure the method leaves the poly in the correct state. This is one kind of sanity check: one part of a program double-checking another part is doing the right thing (similar to printing expected results and actual results).

Rather than putting this test in an if statement, we're going to put it in an assert statement. For example:

assert isValidPoly();      // calls isValidPoly on implicit parameter
Assert statements are described in Special topic 11.5 of the text.
Please make sure you are running your program with assertions enabled for every run of this program, since it's in a development stage. See earlier section for how to do this. You won't really know if they are getting checked unless you force one to fail.

The point of these assert statements is to notify you in no uncertain terms (so to speak :-)) of possible bugs in your code. The program crashing will force you to fix those bugs. For example, if a Poly is not in decreasing order by exponent, then other methods, such as toFormattedString will not work as advertised.

PolyTester program

You are required to write a PolyTester program, similar to the other "Tester" programs we have written for other classes, that uses hard-coded values to put the methods through their paces on well-chosen test cases, and prints expected as well as actual results. You are not required to submit the PolyTester program.

The main advantage to writing such a program is that it will allow you to thoroughly test and debug the more difficult aspects of your Poly class (in particular, the ArrayList to Polyconstructor) without worrying about the details of doing I/O necessary for PolyProg. If you try to debug your PolyProg at the same time as your Poly class, it will be much harder to pinpoint which part of the program is causing problems.

Another advantage to writing a PolyTester program: if you do not get your PolyProg working, partial credit will be given to a working Poly class. You won't even know if you have a working Poly class unless you have some way to test it.


PolyProg program

This section describes the user interface for PolyProg, an interactive program that lets you build and do computations on several Poly objects.
Your program will initially create an array of 10 polynomials whose initial value is the zero polynomial. The user will be able to manipulate any of these polynomials by giving the commands shown by example below. The arguments to the commands are indices of this array. Note: this program doesn't use the Poly(Term t) constructor, so you'll have to test that in PolyTester.

Follow the example below to see what the interface should look like. You should also include an intro message that directs users to a help command option, that when given, should provide a command summary. You should do some rudimentary error handling as well. The example shows some, but not all, of the errors you'll need to handle. See the next section for details of error checking. User input shown in bold below. The explanatory text in italics and parentheses is not part of the actual user interaction.

cmd> create 0
Enter a space-separated sequence of coeff-power pairs terminated by <nl>
1 100 3 0
cmd> print 0
x^100 + 3.0
cmd> create 1
Enter a space-separated sequence of coeff-power pairs terminated by <nl>
1 2 2 1 1 0    
cmd> print 1
x^2 + 2.0x + 1.0
cmd> create 3
Enter a space-separated sequence of coeff-power pairs terminated by <nl>
20 0 3 2              (ok to enter terms in any order)
cmd> create 2
Enter a space-separated sequence of coeff-power pairs terminated by <nl>
10 2  0 1  -6 2  2 1  24 0  1 100 
cmd> PriNt 2          (commands can be upper or lower case)
x^100 + 4.0x^2 + 2.0x + 24.0
cmd> eval 3
Enter a floating point value for x: 2
32.0
cmd> eval 10
ERROR: illegal index for a poly.  must be between 0 and 9, inclusive
cmd> print 9
0.0
cmd> eval 9
Enter a floating point value for x: 17
0.0
cmd> create 1
Enter a space-separated sequence of coeff-power pairs terminated by <nl>
-3 10 0 1 52.3 0 12 0 3 10      (ok to enter zero terms; mult terms with same exponent)
cmd> print 1
64.3 
cmd> exit
ERROR: Illegal command.  Type 'help' for command options.
cmd> quit
Your output for a particular input should match what's shown above character-by-character (e.g., the messages displayed and the error handling should be the same), so we can automate our tests when we grade your program. There are a few places where we haven't specified the exact output (the help command, some of the error messages); obviously, those won't always be the same for each solution.
Hint on identifying commands. The String class has a method to do case-insensitive comparisons.

Error checking required

Here is a list of errors your poly program must check for:
invalid command
illegal polynomial index (for the array of polynomials)
for the polynomial data for the create command:
missing the last exponent (i.e., odd number of values). For this you should ignore the last value entered (i.e., the term that had a coefficient given, but no corresponding exponent).
negative exponent. For this you should use the absolute value.
For each one you must print an informative message which also states the corrective action being taken, if any. All error messages must start with the string "ERROR:". For the last two items listed above, where you are taking corrective action, you should label your message with the string "WARNING:" instead.
Reading polynomial data for create command

The polynomial data for the create command are free-form. Here is more about what will be allowed in that line of input:
Zero coefficients. A polynomial created with a term with a zero coefficient is fine. The Poly class itself handles simplifying the polynomial. There was an example shown of this in the last create command given in the large example shown earlier.
Multiple coefficients that have the same exponent. Again, the polynomial takes care of simplification. The create example just mentioned also shows this.
Multiple spaces (' ') and/or tabs ('\t') are allowed before, between or after the numbers given. Recall that the first newline ('\n') encountered terminates the list of numbers.
Completing this last requirement of create is a little tricky since "in.nextInt()", for example, skips leading whitespace including newlines, but we are using newline as our sentinel, so we have to be able to test for it.
Section 11.2.5 of the textbook (called Scanning a String) shows one way of solving the problem of processing an indeterminate number of values all on one line. It takes advantage of the fact that the Scanner class can also be used to read from a String instead of the keyboard. First you use nextLine() to read the whole line into a String. Then you use a second Scanner object initialized with this string to then break up the line into the parts you want, using the Scanner methods you are already familiar with.

Hint on how to test out this technique: write a little test program to read an indeterminate number of ints from each line. For each line break it up into an indeterminate number of ints, storing them in an ArrayList. Note: This simpler test is not exactly the code you will need for this program (for example, reading the create input involves reading a double alternated with an int).


Structure of PolyProg

The code for PolyProg is much too complicated to put it all into one main method. We could design and add another class, to encapsulate the collection of polynomials, but that still would leave all the code to do the I/O. The structure of such a command-based program lends itself more to a procedural programming design, which we'll review below.
A good design principle is to keep each of your functions small, for easier program readability. In object-oriented programming, the class design sometimes naturally results in small methods, but sometimes you still need auxiliary private methods as we discussed in a previous section. The same principles apply for a procedural design. Since we haven't given you a predefined method decomposition for the PolyProg, you will have to create this decomposition yourself (although we'll give you some hints, coming up).

A procedural design in Java is just implemented as static methods in Java that pass data around via explicit parameters. Static methods are discussed in Section 8.4 of the text, and this use of them was also discussed in a sidebar in Lab 4. We have seen several examples of this in other test programs we have written, for example NumsTester.java of lab4 and PartialNamesTester.java we developed in lecture. We have also seen some utility classes in Java that have static methods: Math and Arrays.

If you have learned about procedural design in previous programming classes, you know that global variables are a no-no. Thus, in designing such a "main program" class, we don't create any class-level variables, because they become effectively global variables. The "main class" does not represent any overall object. Instead you will create variables local to main that will get passed to its helper methods, as necessary.

In particular here, for each PolyProg command you may want a function to read the data for it and process it once you identify which command it is. E.g., doEval, doCreate, etc. That way it will be easy to see the main control structure of main, because it won't be cluttered with a lot of code for reading command arguments, for example. Some of those "do" functions will need to be further decomposed into smaller steps (almost certainly doCreate will).

Note: the next section discusses a limit on method length as one of our style guidelines for this course.


Summary of requirements

As on the first assignment, there are several requirements for this assignment related to design, testing, and development process strewn throughout this document. We'll summarize those and the functional requirements here:
implement Poly class according it's public interface (see Poly: interface)
use the representation for Poly described in the section about that.
the ArrayList to Poly must run in time proportional to the length of the array list plus the time to do the sorting as described in the section on creating a polynomial from an arraylist.
write representation invariant comments for Poly class.
implement and use private Poly method isValidPoly as described here.
implement PolyProg with the user interface described in section about the Poly program.
this program will also be evaluated on style and documentation. We will deduct points for programs that do not follow the published style guidelines for this course (they are also linked from the Assignments page). (Note: For pa1 we only deducted points for problems related to some of the style guidelines.) One guideline we want you to be especially aware of is the limit of 30 lines of code at most allowable in a method. This is exclusive of whitespace, comment lines, and lines that just have a curly bracket by itself (i.e., you should not sacrifice code-readability to make your code fit into this limit).
README file / Submitting your program

You will be submitting Poly.java, PolyProg.java, and README. Make sure your name and loginid appear at the start of each file.
Here's a review of what goes in the README: This is the place to document known bugs in your program. That means you should describe thoroughly any test cases that fail for the the program you are submitting. You can also use the README to give the grader any other special information, such as if there is some special way to compile or run your program. You will also be signing the certification shown near the top of this document.

Like last time, for your convenience we put the exact submit command to use in a shell script. This time we made the script executable, so you do not have to "source" it, but can run it directly from the shell. Type:

~csci455/assgts/pa2/turninpa2
to submit the program. (It's just a text file, so you can look at its contents to see the submit command it will run.)
The University of Southern California does not screen or control the content on this website and thus does not guarantee the accuracy, integrity, or quality of such content. All content on this website is provided by and is the sole responsibility of the person from which such content originated, and such content does not necessarily reflect the opinions of the University administration or the Board of Trustees
